// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`data-loader can load multiple dataloaders with different keys 1`] = `
Object {
  "loadAllCompletedCalled": 0,
  "loadDataCount1": 1,
  "loadDataCount2": 1,
  "renderCount": 2,
  "renderProps": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Test",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
  "renderProps2": Object {
    "data": Object {
      "hasData": false,
    },
    "lastAction": Object {
      "success": true,
      "type": "none",
    },
    "status": "Fetching",
  },
}
`;

exports[`data-loader can resolve data from multiple components 1`] = `
Object {
  "loadAllCompletedCalled": 1,
  "loadDataCount": 1,
  "renderCount": 2,
  "renderCount2": 2,
  "renderProps1": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Test",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
  "renderProps2": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Test",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
}
`;

exports[`data-loader can support preserving data on unmount 1`] = `
Object {
  "existingData": undefined,
  "loadAllCompletedCalled": 1,
  "loadDataCount": 1,
  "renderActions": Object {
    "refresh": [Function],
    "update": [Function],
  },
  "renderCount": 2,
  "renderProps": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Test",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
}
`;

exports[`data-loader can support preserving data on unmount 2`] = `
Object {
  "existingData": undefined,
  "loadAllCompletedCalled": 0,
  "loadDataCount": 0,
  "renderActions": Object {
    "refresh": [Function],
    "update": [Function],
  },
  "renderCount": 1,
  "renderProps": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Test",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
}
`;

exports[`data-loader data is not unloaded until the last attached data-loader is unmounted 1`] = `
Object {
  "loadAllCompletedCalled": 1,
  "loadDataCount": 1,
  "renderCount": 2,
  "renderCount2": 2,
  "renderProps1": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Success!",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
  "renderProps2": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Success!",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
}
`;

exports[`data-loader handles onEvent throwing gracefully 1`] = `
Object {
  "existingData": undefined,
  "loadAllCompletedCalled": 0,
  "loadDataCount": 1,
  "renderActions": Object {
    "refresh": [Function],
    "update": [Function],
  },
  "renderCount": 2,
  "renderProps": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Test",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
}
`;

exports[`data-loader ignores completion if unmounted first 1`] = `
Object {
  "existingData": undefined,
  "loadAllCompletedCalled": 1,
  "loadDataCount": 1,
  "renderActions": Object {
    "refresh": [Function],
    "update": [Function],
  },
  "renderCount": 1,
  "renderProps": Object {
    "data": Object {
      "hasData": false,
    },
    "lastAction": Object {
      "success": true,
      "type": "none",
    },
    "status": "Fetching",
  },
}
`;

exports[`data-loader multiple components load data once when props change 1`] = `
Object {
  "loadAllCompletedCalled": 2,
  "loadDataCount": 2,
  "renderCount": 4,
  "renderCount2": 4,
  "renderProps1": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Success2!",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
  "renderProps2": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Success2!",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": "initial-fetch",
    },
    "status": "Idle",
  },
}
`;

exports[`data-loader resource can resolve synchronously 1`] = `"<div>Result!</div>"`;

exports[`data-loader resource can resolve synchronously when resource changes 1`] = `
Object {
  "existingData": undefined,
  "loadAllCompletedCalled": 0,
  "loadDataCount": 2,
  "renderActions": Object {
    "refresh": [Function],
    "update": [Function],
  },
  "renderCount": 2,
  "renderProps": Object {
    "data": Object {
      "dataFromServerSideRender": false,
      "hasData": true,
      "result": Object {
        "result": "Result2!",
      },
    },
    "lastAction": Object {
      "success": true,
      "type": undefined,
    },
    "status": "Idle",
  },
}
`;

exports[`data-loader supports multiple loaders using the same key when data loading 1`] = `
Object {
  "loadAllCompletedCalled": 0,
  "loadDataCount": 1,
  "renderCount": 1,
  "renderCount2": 1,
  "renderProps1": Object {
    "data": Object {
      "hasData": false,
    },
    "lastAction": Object {
      "success": true,
      "type": "none",
    },
    "status": "Fetching",
  },
  "renderProps2": Object {
    "data": Object {
      "hasData": false,
    },
    "lastAction": Object {
      "success": true,
      "type": "none",
    },
    "status": "Fetching",
  },
}
`;
