exports[`Client side render client render after SSR with data should not fetch data 1`] = `
Object {
  "actions": Object {
    "refresh": [Function],
  },
  "data": Object {
    "result": "Success!",
  },
  "isCompleted": true,
  "isError": false,
  "isLoaded": true,
  "isLoading": false,
  "renderCount": 3,
}
`;

exports[`Client side render client render after SSR with data should not fetch data 2`] = `
Object {
  "dataLoader": Object {
    "data": Object {
      "testDataType": Object {
        "testKey": Object {
          "completed": true,
          "data": Object {
            "result": "Success!",
          },
          "dataFromServerSideRender": true,
          "failed": false,
          "loading": false,
        },
      },
    },
    "loadingCount": 0,
  },
}
`;

exports[`Client side render loads data when props change 1`] = `
Object {
  "actions": Object {
    "refresh": [Function],
  },
  "data": Object {
    "result": "Success2!",
  },
  "isCompleted": true,
  "isError": false,
  "isLoaded": true,
  "isLoading": false,
  "renderCount": 6,
}
`;

exports[`Client side render loads data when props change 2`] = `
Object {
  "dataLoader": Object {
    "data": Object {
      "testDataType": Object {
        "newData": Object {
          "completed": true,
          "data": Object {
            "result": "Success2!",
          },
          "dataFromServerSideRender": false,
          "failed": false,
          "loading": false,
        },
      },
    },
    "loadingCount": 0,
  },
}
`;

exports[`Client side render should ignore completion once component is unmounted 1`] = `
Object {
  "dataLoader": Object {
    "data": Object {},
    "loadingCount": 1,
  },
}
`;

exports[`Client side render should pass failure when data load fails 1`] = `
Object {
  "errorMessage": "Boom!",
  "isCompleted": true,
  "isError": true,
  "isLoaded": false,
  "isLoading": false,
  "renderCount": 3,
}
`;

exports[`Client side render should pass failure when data load fails 2`] = `
Object {
  "dataLoader": Object {
    "data": Object {
      "testDataType": Object {
        "testKey": Object {
          "completed": true,
          "dataFromServerSideRender": false,
          "error": "Boom!",
          "failed": true,
          "loading": false,
        },
      },
    },
    "loadingCount": 0,
  },
}
`;

exports[`Client side render should pass loaded data once promise resolves 1`] = `
Object {
  "actions": Object {
    "refresh": [Function],
  },
  "data": Object {
    "result": "Success!",
  },
  "isCompleted": true,
  "isError": false,
  "isLoaded": true,
  "isLoading": false,
  "renderCount": 3,
}
`;

exports[`Client side render should pass loaded data once promise resolves 2`] = `
Object {
  "dataLoader": Object {
    "data": Object {
      "testDataType": Object {
        "testKey": Object {
          "completed": true,
          "data": Object {
            "result": "Success!",
          },
          "dataFromServerSideRender": false,
          "failed": false,
          "loading": false,
        },
      },
    },
    "loadingCount": 0,
  },
}
`;

exports[`Client side render should remove data from redux when unmounted 1`] = `
Object {
  "dataLoader": Object {
    "data": Object {},
    "loadingCount": 0,
  },
}
`;

exports[`Client side render should start loading data if not loaded 1`] = `
Object {
  "isCompleted": false,
  "isError": false,
  "isLoaded": false,
  "isLoading": true,
  "renderCount": 2,
}
`;

exports[`Client side render should start loading data if not loaded 2`] = `
Object {
  "dataLoader": Object {
    "data": Object {
      "testDataType": Object {
        "testKey": Object {
          "completed": false,
          "dataFromServerSideRender": false,
          "failed": false,
          "loading": true,
        },
      },
    },
    "loadingCount": 1,
  },
}
`;
